// <auto-generated/>
namespace PetStoreAl.models;

using SimonOfHH.Kiota.Definitions;
using SimonOfHH.Kiota.Utilities;

codeunit 50019 ApiResponse implements "Kiota IModelClass SOHH"
{
    Access = Internal;

    var
        #pragma warning disable AA0137
        JSONHelper: Codeunit "JSON Helper SOHH";
        #pragma warning restore AA0137
        JsonBody, SubToken: JsonToken;
        DebugCall: Boolean;
    procedure SetBody(NewJsonBody : JsonToken) 
    begin
        SetBody(NewJsonBody, false);
    end;
    procedure SetBody(NewJsonBody : JsonToken; Debug : Boolean) 
    begin
        JsonBody := NewJsonBody;
        if (Debug) then begin
            #pragma warning disable AA0206
            DebugCall := true;
            #pragma warning restore AA0206
            ValidateBody();
        end;
    end;
    local procedure ValidateBody() 
    var
        #pragma warning disable AA0021,AA0202
        code_: Integer;
        message, type: Text;
        #pragma warning restore AA0021,AA0202
    begin
        code_ := Code_();
        message := Message();
        type := Type();
    end;
    procedure Code_() : Integer
    begin
        if JsonBody.SelectToken('code_', SubToken) then
            exit(SubToken.AsValue().AsInteger());
    end;
    procedure Message() : Text
    begin
        if JsonBody.SelectToken('message', SubToken) then
            exit(SubToken.AsValue().AsText());
    end;
    procedure ToJson() : JsonToken
    begin
        exit(JsonBody);
    end;
    #pragma warning disable AA0245
    procedure ToJson(code_ : Integer; message : Text; type : Text) : JsonToken
    #pragma warning restore AA0245
    var
        TargetJson: JsonObject;
    begin
        JSONHelper.AddToObjectIfNotEmpty(TargetJson, 'code_', code_);
        JSONHelper.AddToObjectIfNotEmpty(TargetJson, 'message', message);
        JSONHelper.AddToObjectIfNotEmpty(TargetJson, 'type', type);
        exit(TargetJson.AsToken());
    end;
    procedure Type() : Text
    begin
        if JsonBody.SelectToken('type', SubToken) then
            exit(SubToken.AsValue().AsText());
    end;
}
