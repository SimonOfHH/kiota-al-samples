// <auto-generated/>
namespace PetStoreAl.models;

using SimonOfHH.Kiota.Definitions;
using SimonOfHH.Kiota.Utilities;

codeunit 50018 Pet implements "Kiota IModelClass SOHH"
{
    Access = Internal;

    var
        #pragma warning disable AA0137
        JSONHelper: Codeunit "JSON Helper SOHH";
        #pragma warning restore AA0137
        JsonBody, SubToken: JsonToken;
        DebugCall: Boolean;
    procedure SetBody(NewJsonBody : JsonToken) 
    begin
        SetBody(NewJsonBody, false);
    end;
    procedure SetBody(NewJsonBody : JsonToken; Debug : Boolean) 
    begin
        JsonBody := NewJsonBody;
        if (Debug) then begin
            #pragma warning disable AA0206
            DebugCall := true;
            #pragma warning restore AA0206
            ValidateBody();
        end;
    end;
    local procedure ValidateBody() 
    var
        #pragma warning disable AA0021,AA0202
        category: Codeunit "Category";
        id: BigInteger;
        name: Text;
        photoUrls: List of [Text];
        status: Enum "Pet_status";
        tags: List of [Codeunit "Tag"];
        #pragma warning restore AA0021,AA0202
    begin
        category := Category();
        id := Id();
        name := Name();
        photoUrls := PhotoUrls();
        status := Status();
        tags := Tags();
        Category(category);
        Id(id);
        Name(name);
        PhotoUrls(photoUrls);
        Status(status);
        Tags(tags);
    end;
    procedure Category() : Codeunit "Category"
    var
        TargetCodeunit: Codeunit "Category";
    begin
        if JsonBody.SelectToken('category', SubToken) then begin
            TargetCodeunit.SetBody(SubToken, DebugCall);
            exit(TargetCodeunit);
        end;
    end;
    procedure Category(p : Codeunit "Category") 
    begin
        if JsonBody.SelectToken('category', SubToken) then
            SubToken.AsObject().Replace('category', p.ToJson())
        else
            JsonBody.AsObject().Add('category', p.ToJson());
    end;
    procedure Id() : BigInteger
    begin
        if JsonBody.SelectToken('id', SubToken) then
            exit(SubToken.AsValue().AsBigInteger());
    end;
    procedure Id(p : BigInteger) 
    begin
        if JsonBody.SelectToken('id', SubToken) then
            SubToken.AsObject().Replace('id', p)
        else
            JsonBody.AsObject().Add('id', p);
    end;
    procedure Name() : Text
    begin
        if JsonBody.SelectToken('name', SubToken) then
            exit(SubToken.AsValue().AsText());
    end;
    procedure Name(p : Text) 
    begin
        if JsonBody.SelectToken('name', SubToken) then
            SubToken.AsObject().Replace('name', p)
        else
            JsonBody.AsObject().Add('name', p);
    end;
    procedure PhotoUrls() CodeunitList: List of [Text]
    var
        JArray: JsonArray;
        JToken: JsonToken;
    begin
        if not JsonBody.SelectToken('photoUrls', SubToken) then
            exit;
        JArray := SubToken.AsArray();
        foreach JToken in JArray do 
            CodeunitList.Add(SubToken.AsValue().AsText());
    end;
    procedure PhotoUrls(p : List of [Text]) 
    var
        v: Text;
        JArray: JsonArray;
    begin
        foreach v in p do
            JArray.Add(v);
        if JsonBody.SelectToken('photoUrls', SubToken) then
            SubToken.AsObject().Replace('photoUrls', JArray)
        else
            JsonBody.AsObject().Add('photoUrls', JArray);
    end;
    procedure Status() : Enum "Pet_status"
    begin
        if JsonBody.SelectToken('status', SubToken) then
            exit(Enum::Pet_status.FromInteger(Enum::Pet_status.Ordinals().Get(Enum::Pet_status.Names().IndexOf(SubToken.AsValue().AsText()))));
    end;
    procedure Status(p : Enum "Pet_status") 
    begin
        if JsonBody.SelectToken('status', SubToken) then
            SubToken.AsObject().Replace('status', p.AsInteger())
        else
            JsonBody.AsObject().Add('status', p.AsInteger());
    end;
    procedure Tags(p : List of [Codeunit "Tag"]) 
    var
        v: Codeunit "Tag";
        JArray: JsonArray;
    begin
        foreach v in p do
            JSONHelper.AddToArrayIfNotEmpty(JArray, v);
        if JsonBody.SelectToken('tags', SubToken) then
            SubToken.AsObject().Replace('tags', JArray)
        else
            JsonBody.AsObject().Add('tags', JArray);
    end;
    procedure Tags() CodeunitList: List of [Codeunit "Tag"]
    var
        TargetCodeunit: Codeunit "Tag";
        JArray: JsonArray;
        JToken: JsonToken;
    begin
        if not JsonBody.SelectToken('tags', SubToken) then
            exit;
        JArray := SubToken.AsArray();
        foreach JToken in JArray do begin
            Clear(TarCodeunit);
            TargetCodeunit.SetBody(JToken, DebugCall);
            CodeunitList.Add(TargetCodeunit);
        end;
    end;
    procedure ToJson() : JsonToken
    begin
        exit(JsonBody);
    end;
    #pragma warning disable AA0245
    procedure ToJson(category : Codeunit "Category"; id : BigInteger; name : Text; photoUrls : List of [Text]; status : Enum "Pet_status"; tags : List of [Codeunit "Tag"]) : JsonToken
    #pragma warning restore AA0245
    var
        #pragma warning disable AA0021
        TargetJson: JsonObject;
        tag: Codeunit "Tag";
        tagsArray: JsonArray;
        #pragma warning restore AA0021
    begin
        JSONHelper.AddToObjectIfNotEmpty(TargetJson, 'category', category.ToJson());
        JSONHelper.AddToObjectIfNotEmpty(TargetJson, 'id', id);
        JSONHelper.AddToObjectIfNotEmpty(TargetJson, 'name', name);
        JSONHelper.AddToObjectIfNotEmpty(TargetJson, 'photoUrls', photoUrls);
        JSONHelper.AddToObjectIfNotEmpty(TargetJson, 'status', status.AsInteger());
        foreach tag in tags do
            JSONHelper.AddToArrayIfNotEmpty(tagsArray, tag);
        JSONHelper.AddToObjectIfNotEmpty(TargetJson, 'tags', tagsArray);
        exit(TargetJson.AsToken());
    end;
}
