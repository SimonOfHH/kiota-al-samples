// <auto-generated/>
namespace PetStoreAl.models;

using SimonOfHH.Kiota.Definitions;
using SimonOfHH.Kiota.Utilities;

codeunit 50020 Category implements "Kiota IModelClass SOHH"
{

    var
        #pragma warning disable AA0137
        JSONHelper: Codeunit "JSON Helper SOHH";
        #pragma warning restore AA0137
        JsonBody: JsonObject;
        SubToken: JsonToken;
        DebugCall: Boolean;
    procedure SetBody(NewJsonBody : JsonObject) 
    begin
        SetBody(NewJsonBody, false);
    end;
    procedure SetBody(NewJsonBody : JsonObject; Debug : Boolean) 
    begin
        JsonBody := NewJsonBody;
        if (Debug) then begin
            #pragma warning disable AA0206
            DebugCall := true;
            #pragma warning restore AA0206
            ValidateBody();
        end;
    end;
    local procedure ValidateBody() 
    var
        #pragma warning disable AA0021,AA0202
        id: BigInteger;
        name: Text;
        #pragma warning restore AA0021,AA0202
    begin
        id := Id();
        name := Name();
        Id(id);
        Name(name);
    end;
    procedure Id() : BigInteger
    begin
        if JsonBody.SelectToken('id', SubToken) then
            exit(SubToken.AsValue().AsBigInteger());
    end;
    procedure Id(p : BigInteger) 
    begin
        if JsonBody.SelectToken('id', SubToken) then
            JsonBody.Replace('id', p)
        else
            JsonBody.Add('id', p);
    end;
    procedure Name() : Text
    begin
        if JsonBody.SelectToken('name', SubToken) then
            exit(SubToken.AsValue().AsText());
    end;
    procedure Name(p : Text) 
    begin
        if JsonBody.SelectToken('name', SubToken) then
            JsonBody.Replace('name', p)
        else
            JsonBody.Add('name', p);
    end;
    procedure ToJson() : JsonObject
    begin
        exit(JsonBody);
    end;
    #pragma warning disable AA0245
    procedure ToJson(id : BigInteger; name : Text) : JsonObject
    #pragma warning restore AA0245
    var
        TargetJson: JsonObject;
    begin
        JSONHelper.AddToObjectIfNotEmpty(TargetJson, 'id', id);
        JSONHelper.AddToObjectIfNotEmpty(TargetJson, 'name', name);
        exit(TargetJson);
    end;
}
